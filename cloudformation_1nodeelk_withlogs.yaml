---
AWSTemplateFormatVersion: '2010-09-09'
Description: Basic template to create a minimal elk stack, with one apache logs producing node
Parameters:
  KeyName:
    Description: Key Pair name
    Type: AWS::EC2::KeyPair::KeyName
  MyOwnIP:
    Description: IP from which to access your server via ssh
    Type: String
    MinLength: 7
    MaxLength: 15
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
    ConstraintDescription: "must be a valid IPv4 IP"
  ElasticsearchInstanceType:
    Description: instance type for the elasticsearch node
    Type: String
    AllowedValues:
    - t2.small
    - t2.medium
    Default: t2.small
  LogstashInstanceType:
    Description: instance type of the logstash instance
    Type: String
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    Default: t2.micro
  KibanaInstanceType:
    Description: instance type of virtual server
    Type: String
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium 
    Default: t2.micro
  ApacheVPC:
    Description: Put the log producing instance into an existing VPC
    Type: AWS::EC2::VPC::Id
  ApacheSubnet:
    Description: Put the log producing instance into an existing Subnet
    Type: AWS::EC2::Subnet::Id
Mappings:
  RegionMap:
    eu-central-1:
      AMI: ami-af0fc0c0
Resources:
# Network: Create the VPC and a Subnet
  minielkVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  minielkSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: minielkVPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true' 
  minielkInternetGateway:
    Type: "AWS::EC2::InternetGateway"
  minielkAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: minielkVPC
      InternetGatewayId:
        Ref: minielkInternetGateway 
  minielkRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: minielkVPC
  minielkSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref minielkSubnet
      RouteTableId:
        Ref: minielkRouteTable
  minielkRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: minielkRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: minielkInternetGateway
# Create a Security Group: 9200 (elasticsearch) for all - not for production! And ssh for me - which I shouldn't need
  ElasticsearchSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow ports 22 for me, 9200 for all"
      SecurityGroupIngress:
      - CidrIp: !Sub ${MyOwnIP}/32
        IpProtocol: "tcp" 
        FromPort: 22
        ToPort: 22
      - CidrIp: 0.0.0.0/0
        IpProtocol: "tcp" 
        FromPort: 9200
        ToPort: 9200
      - CidrIp: 0.0.0.0/0
        IpProtocol: "tcp" 
        FromPort: 9300
        ToPort: 9300
      VpcId:
        Ref: minielkVPC
  LogstashSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow ports 22 for me, 5044 for all"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: "tcp" 
        FromPort: 5044
        ToPort: 5044
      - CidrIp: !Sub ${MyOwnIP}/32
        IpProtocol: "tcp" 
        FromPort: 22
        ToPort: 22
      VpcId:
        Ref: minielkVPC
### Our ES instance
  ElasticsearchEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref ElasticsearchInstanceType
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}_elasticsearch
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: 0
        GroupSet:
        - !Ref ElasticsearchSg
        SubnetId: !Ref minielkSubnet
      KeyName: !Ref KeyName
      UserData:
        "Fn::Base64": 
           !Sub |
             #!/bin/bash -xe
             /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ElasticsearchEC2Instance --configsets elasticsearch_install --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          elasticsearch_install:
          - prepare_install
          - install_elasticsearch
          - configure_elasticsearch
          - run_elasticsearch
          - put_welcome_document
        prepare_install:
          commands: 
            import_eskey_rpm: 
              command: "rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch"
            remove_java: 
              command: "yum remove -y java"
          files:
            /etc/yum.repos.d/elasticsearch.repo:
              content: |
                  [elasticsearch-5.x]
                  name=Elasticsearch repository for 5.x packages
                  baseurl=https://artifacts.elastic.co/packages/5.x/yum
                  gpgcheck=1
                  gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
                  enabled=1
                  autorefresh=1
                  type=rpm-md
              mode: '000400'
              owner: root
              group: root
            /root/memorysizes.txt:
              content: | 
                t2.micro,esmemory,500m 
                t2.small,esmemory,1g
                t2.medium,esmemory,2g
            /root/configure_elasticsearch_memip.sh:
              mode: '000700'
              content: |
                #!/bin/bash -xe  
                LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                INSTANCE_TYPE=$(curl http://169.254.169.254/latest/meta-data/instance-type)
                ESMEMORY=$(cat /root/memorysizes.txt | awk -F, "/$INSTANCE_TYPE/ {print \$3}")
                sed -i "s/#network.host: 192.168.0.1/network.host: $LOCALIP/" /etc/elasticsearch/elasticsearch.yml
                sed -i "s/-Xms2g/-Xms$ESMEMORY/" /etc/elasticsearch/jvm.options
                sed -i "s/-Xmx2g/-Xmx$ESMEMORY/" /etc/elasticsearch/jvm.options
          packages: 
            yum:
              java-1.8.0-openjdk: []
        install_elasticsearch:
          packages:
            yum:
              elasticsearch: []
        configure_elasticsearch:
          commands:
             edit_elasticsearch_yml:
               command: !Sub |
                 #!/bin/bash -xe  
                 sed -i "s/#cluster.name: my-application/cluster.name: ${AWS::StackName}/" /etc/elasticsearch/elasticsearch.yml
                 sed -i "s/#bootstrap.memory_lock: true/bootstrap.memory_lock: true/" /etc/elasticsearch/elasticsearch.yml
                 sed -i "s/#MAX_OPEN_FILES=65536/MAX_OPEN_FILES=65536/" /etc/sysconfig/elasticsearch
                 sed -i "s/#MAX_LOCKED_MEMORY=unlimited/MAX_LOCKED_MEMORY=unlimited/" /etc/sysconfig/elasticsearch
                 sed -i "s/#MAX_MAP_COUNT=262144/MAX_MAP_COUNT=262144/" /etc/sysconfig/elasticsearch
                 /root/configure_elasticsearch_memip.sh
        run_elasticsearch:
          commands:
            install_plugins: 
              command: |
                #!/bin/bash -xe  
                echo y | /usr/share/elasticsearch/bin/elasticsearch-plugin install discovery-ec2
          services:
            sysvinit:
              elasticsearch:
                enabled: "true"
                ensureRunning: "true"
        put_welcome_document:
          commands:
             edit_elasticsearch_yml:
               command: !Sub |
                 #!/bin/bash -xe  
                 LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                 curl -XPUT "$LOCALIP:9200/welcome/message/1" -d '{"success": "Welcome to elasticsearch 5."}'
### Our logstash instance
  logstashEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: ElasticsearchEC2Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref LogstashInstanceType
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}_logstash
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: 0
        GroupSet:
        - !Ref LogstashSg
        SubnetId: !Ref minielkSubnet
      KeyName: !Ref KeyName
      UserData:
        "Fn::Base64": 
           !Sub |
             #!/bin/bash -xe
             /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource logstashEC2Instance --configsets logstash_install --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          logstash_install:
          - prepare_install
          - install_logstash
          - configure_logstash
          - run_logstash
        prepare_install:
          commands: 
            import_eskey_rpm: 
              command: "rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch"
            remove_java: 
              command: "yum remove -y java"
          files:
            /etc/yum.repos.d/logstash.repo:
              content: |
                  [logstash-5.x]
                  name=Elastic repository for 5.x packages
                  baseurl=https://artifacts.elastic.co/packages/5.x/yum
                  gpgcheck=1
                  gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
                  enabled=1
                  autorefresh=1
                  type=rpm-md
              mode: '000400'
              owner: root
              group: root
          packages: 
            yum:
              java-1.8.0-openjdk: []
        install_logstash:
          packages:
            yum:
              logstash: []
        configure_logstash:
          files: 
            /etc/logstash/conf.d/logstash.conf: 
              content: !Sub |
                input {
                  beats {
                    port => 5044
                  }
                }
                
                filter {
                  grok {
                    match => { "message" => "%{COMBINEDAPACHELOG}" }
                  }
                  date {
                    match => [ "timestamp" , "dd/MM/yyyy:HH:mm:ss Z" ]
                  }
                }
                  
                output {
                  elasticsearch { hosts => ["${ElasticsearchEC2Instance.PrivateIp}:9200"] }
                }
        run_logstash:
          commands:
            run_logstash:
              command: "initctl start logstash"
  KibanaEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: ElasticsearchEC2Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          kibana:
          - prepare
          - install
          - configure
          - start
        prepare:
          commands:
            import_pgp_key:
              command: "rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch"
          files:
            /etc/yum.repos.d/kibana.repo:
              content: |
                [kibana-5.x]
                name=Kibana repository for 5.x packages
                baseurl=https://artifacts.elastic.co/packages/5.x/yum
                gpgcheck=1
                gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
                enabled=1
                autorefresh=1
                type=rpm-md 
              mode: 000400
              owner: root
              group: root
        install:
          packages:
            yum:
              kibana: []
        configure:
          commands:
            configure_kibana:
              command: !Sub |
                #!/bin/bash -xe
                LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                sed -i "s/#server.host: \"localhost\"/server.host: \"$LOCALIP\"/" /etc/kibana/kibana.yml 
                sed -i "s/localhost:9200/${ElasticsearchEC2Instance.PrivateIp}:9200/" /etc/kibana/kibana.yml
                sed -i "s/#elasticsearch.url/elasticsearch.url/" /etc/kibana/kibana.yml
        start:   
          services:
            sysvinit:
               kibana:
                 enabled: true
                 ensureRunning: true
    Properties:
      ImageId: ami-af0fc0c0 
      KeyName: !Ref KeyName  
      InstanceType: !Ref KibanaInstanceType 
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        GroupSet:
        - !Ref KibanaSecurityGroup
        SubnetId: !Ref minielkSubnet
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}_kibana  
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          /opt/aws/bin/cfn-init -s ${AWS::StackName} -r KibanaEC2Instance --configsets kibana --region ${AWS::Region}
  KibanaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: kibana-minielk 
      VpcId: !Ref minielkVPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 5601 
        IpProtocol: tcp
        ToPort: 5601 
      - CidrIp: !Sub ${MyOwnIP}/32
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
### Now our log producing instance, in another VPC
  ApacheMockLogEC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          mock_apache:
          - prepare
          - install
          - configure
          - run
        prepare:
          commands: 
            import_key_rpm: 
              command: "rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch"
          files:
            /etc/yum.repos.d/elastic.repo:
              content: |
                  [elasticsearch-5.x]
                  name=Elasticsearch repository for 5.x packages
                  baseurl=https://artifacts.elastic.co/packages/5.x/yum
                  gpgcheck=1
                  gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
                  enabled=1
                  autorefresh=1
                  type=rpm-md
              mode: '000400'
              owner: root
              group: root
        install: 
          packages:
            yum:
              git: []  
              filebeat: []
              python27-numpy: []
              python27-pytz: []
          commands:
            git_clone:
              cwd: /root
              command: git clone https://github.com/kiritbasu/Fake-Apache-Log-Generator.git
            pip_install_requirements:
              cwd: /root/Fake-Apache-Log-Generator
              command: pip install fake-factory==0.7.2; pip install Faker==0.7.3 
        configure:
          files:
            /root/fake.sh:
              content: |
                #!/bin/bash
                while true; do cd /root/Fake-Apache-Log-Generator/; python apache-fake-log-gen.py -n 10 -o LOG; sleep 60; done
              mode: "000750"
              owner: root
              group: root
            /etc/filebeat/filebeat.yml:
              content: !Sub |
                filebeat.prospectors:
                - input_type: log
                  paths:
                    - /root/Fake-Apache-Log-Generator/*.log
                output.logstash:
                  hosts: ["${logstashEC2Instance.PublicIp}:5044"]
        run:
          commands:
            run_filebeat:
              command: service filebeat start
            run_fake:
              command: /root/fake.sh
          services:
            sysvinit:
              filebeat:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: ami-af0fc0c0 
      KeyName: !Ref KeyName  
      InstanceType: t2.small
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        GroupSet:
        - !Ref WebserverSecurityGroup
        SubnetId: !Ref ApacheSubnet
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          /opt/aws/bin/cfn-init -s ${AWS::StackName} -r ApacheMockLogEC2Instance --configsets mock_apache --region ${AWS::Region}
  WebserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Not a real apache, only ssh permitted"
      VpcId: !Ref ApacheVPC
      SecurityGroupIngress:
      - CidrIp: !Sub ${MyOwnIP}/32
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
Outputs:
  WebsiteURL:
    Description: The URL pointing the webserver.
    Value: !Sub http://${EC2Instance.PublicIp}:5601
  ServerIp:
    Description: The Server Ip 
    Value: !Sub ${EC2Instance.PublicIp}
Outputs:
  SshToYourElasticsearchBox:
    Description: how to ssh to your elasticsearch instance
    Value: !Sub 'ssh -i $HOME/.ssh/${KeyName} ec2-user@${ElasticsearchEC2Instance.PublicIp}'
  SshToYourLogstashBox:
    Description: how to ssh to your logstash instance
    Value: !Sub 'ssh -i $HOME/.ssh/${KeyName} ec2-user@${logstashEC2Instance.PublicIp}'
  SshToYourKibanaBox:
    Description: how to ssh to your kibana instance
    Value: !Sub 'ssh -i $HOME/.ssh/${KeyName} ec2-user@${KibanaEC2Instance.PublicIp}'
  SshToYourMockApacheBox:
    Description: how to ssh to your mock apache instance
    Value: !Sub 'ssh -i $HOME/.ssh/${KeyName} ec2-user@${ApacheMockLogEC2Instance.PublicIp}'
  EnjoyES:
    Description: If everything worked, here are your indices.
    Value: !Sub 'http://${ElasticsearchEC2Instance.PublicIp}:9200/_cat/indices'
  KibanaUrl:
    Description: The URL pointing to Kibana.
    Value: !Sub http://${KibanaEC2Instance.PublicIp}:5601


