---
AWSTemplateFormatVersion: '2010-09-09'
Description: Basic template to create a cluster of 3 elasticsearch 5 nodes
Parameters:
  KeyName:
    Description: Key Pair name
    Type: AWS::EC2::KeyPair::KeyName
  MyOwnIP:
    Description: IP from which to access your server via ssh
    Type: String
    MinLength: 7
    MaxLength: 15
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
    ConstraintDescription: "must be a valid IPv4 IP"
  InstanceType:
    Description: instance type of virtual server
    Type: String
    AllowedValues:
    - t2.small
    - t2.medium
Mappings:
  RegionMap:
    eu-central-1:
      AMI: ami-af0fc0c0
Resources:
# Network: Create the VPC and a Subnet - which we don't need here
  minielkVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  minielkSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: minielkVPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true' 
  minielkInternetGateway:
    Type: "AWS::EC2::InternetGateway"
  minielkAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: minielkVPC
      InternetGatewayId:
        Ref: minielkInternetGateway 
  minielkRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: minielkVPC
  minielkSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: minielkSubnet
      RouteTableId:
        Ref: minielkRouteTable
  minielkRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: minielkRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: minielkInternetGateway
# Create a Security Group: 9200 (elasticsearch) for all - not for production! And ssh for me - which I shouldn't need
  miniELKsshsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow ports 22 for me, 9200 for all"
      SecurityGroupIngress:
      - CidrIp: !Sub ${MyOwnIP}/32
        IpProtocol: "tcp" 
        FromPort: 22
        ToPort: 22
      - CidrIp: 0.0.0.0/0
        IpProtocol: "tcp" 
        FromPort: 9200
        ToPort: 9200
      - CidrIp: 0.0.0.0/0
        IpProtocol: "tcp" 
        FromPort: 9300
        ToPort: 9300
      VpcId:
        Ref: minielkVPC
### IAM Identities: Role and Policy
  DiscoverInstancesRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "root"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: "ec2:DescribeInstances"
                Resource: "*"
  EsIamInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles:
        - ElasticsearchDiscovery
### Our ES cluster
  ESLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EsIamInstanceProfile
      SecurityGroups: 
        - !Ref miniELKsshsg
      KeyName: !Ref KeyName
      UserData:
        "Fn::Base64": 
           !Sub |
             #!/bin/bash -xe
             /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ESLaunchConfiguration --configsets elasticsearch_install --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          elasticsearch_install:
          - prepare_install
          - install_elasticsearch
          - configure_elasticsearch
          - run_elasticsearch
          - put_welcome_document
        prepare_install:
          commands: 
            import_eskey_rpm: 
              command: "rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch"
            remove_java: 
              command: "yum remove -y java"
          files:
            /etc/yum.repos.d/elasticsearch.repo:
              content: |
                  [elasticsearch-5.x]
                  name=Elasticsearch repository for 5.x packages
                  baseurl=https://artifacts.elastic.co/packages/5.x/yum
                  gpgcheck=1
                  gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
                  enabled=1
                  autorefresh=1
                  type=rpm-md
              mode: '000400'
              owner: root
              group: root
            /root/memorysizes.txt:
              content: | 
                t2.micro,esmemory,500m 
                t2.small,esmemory,1g
                t2.medium,esmemory,2g
            /root/configure_elasticsearch_memip.sh:
              mode: '000700'
              content: |
                #!/bin/bash -xe  
                LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                INSTANCE_TYPE=$(curl http://169.254.169.254/latest/meta-data/instance-type)
                ESMEMORY=$(cat /root/memorysizes.txt | awk -F, "/$INSTANCE_TYPE/ {print \$3}")
                sed -i "s/#network.host: 192.168.0.1/network.host: $LOCALIP/" /etc/elasticsearch/elasticsearch.yml
                sed -i "s/-Xms2g/-Xms$ESMEMORY/" /etc/elasticsearch/jvm.options
                sed -i "s/-Xmx2g/-Xmx$ESMEMORY/" /etc/elasticsearch/jvm.options
          packages: 
            yum:
              java-1.8.0-openjdk: []
        install_elasticsearch:
          packages:
            yum:
              elasticsearch: []
        configure_elasticsearch:
          commands:
             edit_elasticsearch_yml:
               command: !Sub |
                 #!/bin/bash -xe  
                 sed -i "s/#cluster.name: my-application/cluster.name: ${AWS::StackName}/" /etc/elasticsearch/elasticsearch.yml
                 sed -i "s/#bootstrap.memory_lock: true/bootstrap.memory_lock: true/" /etc/elasticsearch/elasticsearch.yml
                 sed -i "s/#MAX_OPEN_FILES=65536/MAX_OPEN_FILES=65536/" /etc/sysconfig/elasticsearch
                 sed -i "s/#MAX_LOCKED_MEMORY=unlimited/MAX_LOCKED_MEMORY=unlimited/" /etc/sysconfig/elasticsearch
                 sed -i "s/#MAX_MAP_COUNT=262144/MAX_MAP_COUNT=262144/" /etc/sysconfig/elasticsearch
                 sed -i "s/#discovery.zen.ping.unicast.hosts:.*/discovery:\n  zen.hosts_provider:\n    ec2\ncloud.aws.region: eu-central-1/" /etc/elasticsearch/elasticsearch.yml
                 /root/configure_elasticsearch_memip.sh
        run_elasticsearch:
          commands:
            install_plugins: 
              command: |
                #!/bin/bash -xe  
                echo y | /usr/share/elasticsearch/bin/elasticsearch-plugin install discovery-ec2
          services:
            sysvinit:
              elasticsearch:
                enabled: "true"
                ensureRunning: "true"
        put_welcome_document:
          commands:
             edit_elasticsearch_yml:
               command: !Sub |
                 #!/bin/bash -xe  
                 LOCALIP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                 curl -XPUT "$LOCALIP:9200/welcome/message/1" -d '{"success": "Welcome to elasticsearch 5."}'
  ElasticsearchCluster:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '2'
      MaxSize: '3'
      DesiredCapacity: '3'
      LaunchConfigurationName: !Ref ESLaunchConfiguration
      VPCZoneIdentifier: 
        - !Ref minielkSubnet
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}
        PropagateAtLaunch: true






