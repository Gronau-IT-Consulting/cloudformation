---
AWSTemplateFormatVersion: '2010-09-09'
Description: Elasticsearch 5 minimal setup - failing with dependency 
Parameters:
  KeyName:
    Description: Key Pair name
    Type: AWS::EC2::KeyPair::KeyName
  MyOwnIP:
    Description: IP from which to access your server
    Type: String
    MinLength: 7
    MaxLength: 15
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
    ConstraintDescription: "must be a valid IPv4 IP"
  InstanceType:
    Description: instance type of virtual server
    Type: String
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
Mappings:
  RegionMap:
    eu-central-1:
      AMI: ami-af0fc0c0
Resources:
### Step 1: Create the VPC and a Subnet (which we probably don't need)
  minielkVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  minielkSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: minielkVPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: 'true' 
  minielkInternetGateway:
    Type: "AWS::EC2::InternetGateway"
  minielkAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: minielkVPC
      InternetGatewayId:
        Ref: minielkInternetGateway 
  minielkRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: minielkVPC
  minielkSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: minielkSubnet
      RouteTableId:
        Ref: minielkRouteTable
  minielkRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: minielkRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: minielkInternetGateway
#### Step 2: Create a Security Group
  miniELKsshsg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow ports 22 for me, 9200 for all"
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: "tcp" 
        FromPort: 80
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        IpProtocol: "tcp" 
        FromPort: 443
        ToPort: 443
      SecurityGroupIngress:
      - CidrIp: !Sub ${MyOwnIP}/32
        IpProtocol: "tcp" 
        FromPort: 22
        ToPort: 22
      - CidrIp: 0.0.0.0/0
        IpProtocol: "tcp" 
        FromPort: 9200
        ToPort: 9200
      VpcId:
        Ref: minielkVPC

### Step 3: Our ES instance
  minielkESEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
      - AssociatePublicIpAddress: 'true'
        DeviceIndex: 0
        GroupSet:
        - !Ref miniELKsshsg
        SubnetId: !Ref minielkSubnet
      KeyName: !Ref KeyName
      UserData:
        "Fn::Base64": 
           !Sub |
             #!/bin/bash -xe
             /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource minielkESEC2Instance --configsets elasticsearch_install --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          elasticsearch_install:
          - prepare_install
          - install_elasticsearch
          - configure_elasticsearch
          - run_elasticsearch
        prepare_install:
          commands: 
            import_eskey_rpm: 
              command: "rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch"
            remove_java: 
              command: "yum remove -y java"
          files:
            /etc/yum.repos.d/elasticsearch.repo:
              content: |
                  [elasticsearch-5.x]
                  name=Elasticsearch repository for 5.x packages
                  baseurl=https://artifacts.elastic.co/packages/5.x/yum
                  gpgcheck=1
                  gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
                  enabled=1
                  autorefresh=1
                  type=rpm-md
              mode: '000400'
              owner: root
              group: root
            /etc/stackname:
              content: !Sub |
                  ${AWS::StackName}
          packages: 
            yum:
              java-1.8.0-openjdk: []
        install_elasticsearch:
          packages:
            yum:
              elasticsearch: []
        configure_elasticsearch:
          commands:
             edit_elasticsearch_yml:
               command: !Sub |
                        #!/bin/bash -xe  
                        sed -i "s/#network.host: 192.168.0.1/network.host: ${minielkESEC2Instance.PrivateIp}/" /etc/elasticsearch/elasticsearch.yml
                        sed -i "s/#cluster.name: my-application/cluster.name: ${AWS::StackName}/" /etc/elasticsearch/elasticsearch.yml
                        sed -i "s/#bootstrap.memory_lock: true/bootstrap.memory_lock: true/" /etc/elasticsearch/elasticsearch.yml
                        sed -i "s/#MAX_OPEN_FILES=65536/MAX_OPEN_FILES=65536/" /etc/sysconfig/elasticsearch
                        sed -i "s/#MAX_LOCKED_MEMORY=unlimited/MAX_LOCKED_MEMORY=unlimited/" /etc/sysconfig/elasticsearch
                        sed -i "s/#MAX_MAP_COUNT=262144/MAX_MAP_COUNT=262144/" /etc/sysconfig/elasticsearch
        run_elasticsearch:
          commands:
            install_plugins: 
              command: |
                #!/bin/bash -xe  
                echo y | /usr/share/elasticsearch/bin/elasticsearch-plugin install discovery-ec2
          services:
            sysvinit:
              elasticsearch:
                enabled: "true"
                ensureRunning: "true"
Outputs:
  SshCoordinates:
    Description: How to ssh to your new instance
    Value: !Sub 'ssh -i $HOME/.ssh/${minielkESEC2Instance.KeyName} ec2-user@${minielkESEC2Instance.PublicIp}'


